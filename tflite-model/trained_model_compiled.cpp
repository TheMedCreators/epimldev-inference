/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.09.2022 23:05:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,57 } };
const TfArray<1, float> quant0_scale = { 1, { 0.17341031134128571, } };
const TfArray<1, int> quant0_zero = { 1, { -100 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*57] = { 
  -62, -43, -34, 49, 3, 2, -59, -45, -59, 16, 71, -34, -49, 70, 30, 79, 77, -17, 58, -28, 82, -52, 119, -31, -55, -36, -61, 27, -32, -23, -48, -72, 9, 61, 32, -25, -35, 54, 7, 7, 64, 111, 60, 34, -46, 40, -9, 51, -26, 21, 43, 69, -50, 77, 34, 25, 17, 
  16, 18, 3, 7, 34, 72, 53, 65, -69, 31, 22, -59, -50, -91, -82, -66, -62, -103, 16, 53, 2, -28, -25, -25, 15, -47, 4, 13, -77, -30, 21, 28, -111, -52, -100, 35, -61, 10, 51, -57, -8, 48, 32, 0, -58, -74, 2, -35, -49, -77, 5, 42, -103, -72, 34, -55, -109, 
  14, -79, -48, 58, 15, 29, -63, -7, -38, 12, -21, -14, -54, -13, 40, -65, -53, -21, 62, -47, 61, 4, -9, 34, -31, 64, 3, -47, -22, -56, -62, 45, -76, 22, -60, 15, 10, -18, -21, -44, 74, 16, 15, 6, -4, 19, 60, -18, 79, -58, 69, -2, 14, -53, 49, 35, 45, 
  -73, -4, -38, 75, 39, 21, -45, 21, 13, 63, -7, -73, 2, 22, -12, -50, -30, -26, 58, 62, -49, -45, 120, 17, -17, 78, 9, -33, 47, 3, -19, 30, -17, -85, -12, 50, 6, -31, -50, 22, 25, 27, 2, 46, -37, -32, 62, -47, 41, 45, 57, -46, -29, 73, -65, -49, 33, 
  -11, 41, -41, 45, 18, 61, -64, -36, 10, 19, 21, 1, -7, -18, -66, -4, -38, -35, 15, 9, 14, -31, -30, 14, -12, -37, 64, 30, 70, -1, 5, -41, -38, 44, -37, -27, 46, 41, -61, -36, 34, -63, -52, -22, -72, -7, 61, 57, 38, 23, 31, -71, 13, -43, 48, -18, 44, 
  42, -40, -12, -14, 2, 36, 25, 31, 6, -56, -30, -41, 76, -31, 61, 14, -41, 24, 54, 64, -47, -57, -18, -25, -47, 36, 12, -30, 39, 19, 30, 67, -1, 63, -37, 35, -20, 10, 78, -46, -3, 18, 69, 49, -21, 50, -66, 45, -10, -7, -13, -1, -34, -44, -25, 36, 15, 
  -44, 71, -10, -15, -20, 33, 33, -6, -25, 50, -54, -51, -71, -50, 69, 20, -13, 40, 26, -18, -1, 6, 82, -51, 21, 4, -35, 13, 18, -23, 31, -25, -50, -9, -30, -35, 16, 53, 21, -37, 62, 18, -53, -32, 0, 10, 66, 73, 49, 41, 33, 16, 58, -22, -67, 40, -40, 
  10, 49, -97, -51, -46, 107, 41, -43, 94, -26, 83, -7, -20, 0, -6, 25, 29, -28, 38, -23, -72, -68, -127, -18, 26, -45, 79, 56, 60, 81, -33, 99, -37, -9, 10, 35, -60, 37, 59, -3, -17, -106, 57, -22, -41, 75, 57, 80, 44, 29, 99, 48, -16, 85, 45, 30, 25, 
  25, 32, 25, -73, 45, 30, -29, -19, 29, -65, -79, 67, -2, -36, -85, -56, 6, -21, 49, -1, -15, -20, -17, -49, -42, 61, -72, 11, 53, -9, -36, 20, -42, 22, 45, 16, -21, 2, -65, 12, 36, -64, -56, 45, -27, 0, 56, 29, -61, 57, -84, -64, 10, -61, -29, -7, -71, 
  -2, 21, 12, 48, -66, -6, -11, -34, 31, -23, -8, -37, -50, -17, -10, -49, 4, 52, 47, -57, 50, -46, 3, 61, 48, -73, -43, -65, 47, 23, -81, 2, -24, -79, -34, 43, -32, 35, -4, 57, -42, -30, 36, 37, 13, -69, 40, -22, -39, 39, -36, 58, -65, 56, 35, -93, -78, 
  -43, -46, -80, -16, 98, -15, 39, 12, 17, 47, -1, 52, -19, 38, -53, -97, -87, -1, -67, 20, -39, 5, 91, -40, -26, 38, -53, 37, 3, -88, 41, -50, -99, -31, 53, 7, -53, -10, -32, -42, -37, 46, 89, 77, 41, 56, 10, 23, -63, -106, 26, -71, -95, -31, 12, -91, -26, 
  74, 39, 3, -38, 7, 92, 30, 65, 75, 90, 4, 82, 30, -32, -25, 52, 27, 62, 77, 44, 15, -25, -29, 5, 65, -55, -11, 74, -35, 59, -51, 49, -34, -14, 49, -60, 64, 44, 68, -36, -40, -46, -79, -54, -62, 1, -60, 14, 18, 31, 2, 9, 76, 88, 84, -25, 76, 
  19, 66, 29, -6, 68, -34, 19, -34, -14, 65, -15, -45, -64, 55, 57, -75, 39, -9, -78, 0, -34, -6, 109, 6, -74, -1, -55, 17, 55, -32, 43, -33, -27, 62, -50, -33, -32, -2, -54, 78, -11, 54, 27, 55, 5, -28, 42, -29, -21, 25, -33, -27, -24, -54, 64, 50, 50, 
  -11, 11, -17, 42, -3, -36, 22, -32, 5, 38, 53, 45, 15, -55, -19, 2, -57, -48, 3, 51, -64, -25, 24, -41, -91, 48, 28, -2, 52, -47, -89, 64, 7, 27, 51, 36, 67, -51, 28, -58, -17, -14, 38, -38, -58, -8, -58, -21, -21, 53, -63, -57, -10, -15, 53, 48, 13, 
  -45, -78, 77, -38, 35, -28, 37, 46, 6, -29, -66, -14, -64, -22, 7, -13, -43, -36, -34, -45, 21, 32, -47, 25, 42, 1, -59, -12, -34, 3, 10, -4, 53, 48, 60, -76, 17, 5, -56, -24, 2, -64, 50, -71, -31, -2, 45, -77, 51, 5, -61, 1, 42, 34, -16, -38, -31, 
  -56, 69, -32, 18, -27, 58, -55, -47, -20, 53, -54, 27, -40, -31, 68, -66, -13, 46, 42, 46, 15, -31, 11, -69, -42, -29, 40, 23, 4, 6, -69, -59, -64, 50, 55, -18, -13, 53, -12, 48, 56, -53, 53, -18, -40, 36, -80, 63, -36, 43, -17, 36, 13, 20, 9, 38, -13, 
  -51, 91, 72, 54, 19, 5, 4, -24, -2, 26, 2, -65, -50, -77, -66, 21, 38, 17, -84, 12, -9, -50, 5, 83, 51, 43, -7, 9, 71, 65, -11, -39, -27, 28, 22, 12, -21, -43, -45, 52, 41, 114, -20, -45, 57, 43, 50, 66, 75, 20, 60, 58, -14, 23, -19, 0, -77, 
  -34, 28, -44, -33, 85, -29, 23, 64, -41, 2, -4, 16, -13, -52, -51, -56, -28, -46, -77, 78, -41, -18, 76, -42, 69, -1, -51, 70, 32, 21, 16, -26, -18, -19, -83, -95, 40, -15, -57, 21, -26, 81, -39, 67, 92, 84, 52, 63, -12, -81, -69, 18, -66, 40, 45, -86, -42, 
  -54, -8, 58, 90, 52, 27, 0, -48, -17, -18, -64, -50, 58, -9, -31, 61, -22, -3, -51, -4, 73, -61, 0, 86, -52, -57, 64, -19, 17, 1, 46, 31, 63, 6, 54, 65, 48, 1, 12, 60, -22, -56, 26, -33, 82, 67, -54, 41, 40, 9, 7, -60, -47, -25, 42, -45, 17, 
  -31, 60, 91, 82, 34, -11, 3, -65, 60, 54, -37, 37, -31, -49, 31, -5, -10, -102, -8, 15, 4, 57, 114, -39, 43, 76, -10, 48, -100, -109, -116, -99, 36, -2, -1, -22, 27, -70, 41, 7, -9, 13, 94, 28, -26, 20, -17, 42, -59, -104, 34, 27, -49, -48, -51, -30, 31, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,57 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0035908303689211607, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 157, 226, 130, 210, -25, 16, 57, -163, 35, 85, 233, -95, 153, -63, 6, -51, 201, 184, 85, 254, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00062268698820844293, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = { 
  -48, -8, 16, 8, 57, -46, -20, 11, -62, -69, -31, -41, 57, 54, -24, -1, -64, 6, -23, 3, 
  -47, 5, -35, 22, 15, 1, 49, -31, -27, -53, 3, -58, -22, -26, -54, -62, -35, 40, 28, -67, 
  11, 95, 55, 33, 67, 23, 70, -73, 74, 72, 27, -26, 94, -35, 40, 3, 47, 113, 3, 42, 
  -61, -26, -47, -83, -13, 37, 39, 90, 58, -49, 20, 41, -22, -48, -20, 64, -5, 10, -3, -65, 
  5, 2, -41, -57, -71, 57, -26, -1, -44, 67, -6, -71, -68, 23, -14, 11, 4, -66, 62, 11, 
  28, 46, -61, -9, -50, -15, -2, 22, 61, -73, -106, 72, -72, 28, -42, 51, -79, -13, -75, 35, 
  117, 36, 48, 127, 61, -35, 48, -38, 37, 60, 64, 13, 20, -6, 8, 14, 88, -1, 91, 38, 
  12, 81, -17, -43, -8, -6, 10, -99, 73, 60, 83, 60, 16, 4, -5, -19, -5, 26, -7, 56, 
  -56, 31, -3, 17, 61, -12, 35, -57, -22, -68, -4, 44, 46, 63, -19, 30, -72, 51, -15, -13, 
  7, 43, 32, 79, -42, 47, 62, -85, 63, -11, 24, 14, -31, -15, -45, 25, 98, 81, -1, 92, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0061361542902886868, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { -97, -88, 907, -195, -77, -151, 955, 268, -170, 287, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00036307791015133262, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[2*10] = { 
  -26, -101, 35, -127, 9, -78, 86, 88, 8, 60, 
  57, -99, -54, 120, 83, 64, 11, -25, 17, -23, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0066220578737556934, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[2] = { 136, -136, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00062199804233387113, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.059170268476009369, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.093928210437297821, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.14310547709465027, } };
const TfArray<1, int> quant9_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 1140, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
